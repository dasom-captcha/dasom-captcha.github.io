{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://dasom-captcha.github.io","root":"/"},"pages":[],"posts":[{"title":"03_Hexo","slug":"03-Hexo","date":"2019-04-04T07:43:01.000Z","updated":"2019-04-04T09:28:51.944Z","comments":true,"path":"2019/04/04/03-Hexo/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/03-Hexo/","excerpt":"","text":"","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://dasom-captcha.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://dasom-captcha.github.io/tags/Hexo/"}]},{"title":"03-BaekShin-Git","slug":"03-BaekShin-Git","date":"2019-04-04T07:38:33.000Z","updated":"2019-04-04T09:18:35.659Z","comments":true,"path":"2019/04/04/03-BaekShin-Git/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/03-BaekShin-Git/","excerpt":"","text":"1. Git Branch 사용하기 123$ git branch #현재 존재하는 branch 조회$ git checkout #현재 작업중인 brach 조회$ git checkout branch1 #전환 1$ git branch branch1 master master에서 branch1이름의 branch 만들기 1$ git checkout -b branch1 master master에서 branch1이름의 branch 만들고 checkout함(전환) 12$ git branch -d branch1 #삭제(github는 유지)$ git push origin -delete branch1 #삭제(github는 삭제) 2. merge와 rebase 두 개의 branch를 합치는 방법으로는 merge와 rebase가 있다.차이점을 한번 알아본 후 merge시 주의할 점도 알아보자. 2.1 merge와 rebase의 차이 현 상태가 위와 같다고 가정을 해본다. merge를 하게 되면 아래 그림과 같은 로그가 남겨진다. rebase를 하게 되면 아래 그림과 같은 로그가 남겨진다. 명백한 차이점이 있다! merge : 변경된 점의 모든 로그가 남는다. (큰 프로젝트면 복잡해짐) rebase : 로그가 단순하게 변경되지만, 정확한 로그를 남기는 것이 불가능해 진다. 2.2 merge시 fast-forward 충돌 해결법 다음과 같이 master branch와 bugfix branch가 있다고 가정한다. 이제 merge를 하게 되면 bugfix branch가 master의 모든 이력을 포함하고 있기 때문에 master branch가 단순히 이동하기만 한다. 이것이 바로 fast-forward.. How to solve 단순하게 master branch에 변경점을 주고 commit하면 될 것 같다.. 혹은 1$ git merge --no-ff merge를 할때 다음과 같은 옵션을 주게 되면 위 사진과 같이 fast-forward merge를 하지 않는다. 이렇게 하면 merge를 한 이후에도 bugfix branch를 계속해서 사용할 수 있다! 다음은 문제가 발생한 후의 대처법이다. 위 그림을 보면 master와 issue2가 fast-forward merge되었다. 이 상태에서 issue3와 merge를 할 시 같은 파일의 같은 행이 변경 된다면 분명 오류가 날 것이며 파일이 다음과 같이 변경 될 것의 예시이다. 1234567111111111111111222222222222222&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD333333333333333=======444444444444444&gt;&gt;&gt;&gt;&gt;&gt;&gt; issue3 이제 1234111111111111111222222222222222333333333333333444444444444444 다음과 같이 변경해주고 commit하면 문제가 해결 된다. (이것도 non fast-forward 방식)","categories":[{"name":"Git","slug":"Git","permalink":"http://dasom-captcha.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://dasom-captcha.github.io/tags/Git/"}]},{"title":"02_Hexo","slug":"02-Hexo","date":"2019-04-04T05:24:56.000Z","updated":"2019-04-04T09:28:50.367Z","comments":true,"path":"2019/04/04/02-Hexo/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/02-Hexo/","excerpt":"","text":"1. Tag Plugins Hexo는 마크다운 외에 포스트를 작성하기 위해 Tag Plugin이라는 자체적인 문법을 지원 1.1 인용 구문 How to use123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; Example123&#123;% blockquote 신동욱, 대학원생 https://github.com/nawook96 %&#125;배고프다&#123;% endblockquote %&#125; Result배고프다 신동욱, 대학원생github.com/nawook96 1.2 코드 삽입 lang은 https://highlightjs.org 에서 지원하는 언어만 나옴(highlight), 파일명 명시도 가능How to use123&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; Example123&#123;% codeblock lang:objc hi.h%&#125;[rectangle setX: 10 y: 10 width: 20 height: 20];&#123;% endcodeblock %&#125; Resulthi.h1[rectangle setX: 10 y: 10 width: 20 height: 20]; 1.3 YOUTUBE 삽입 How to use1&#123;% youtube video_id %&#125; Example1&#123;% youtube Z0ti3pBKmes %&#125; Result 1.4 Asset 삽입 이미지 삽입에서 추가 설명How to use123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; 2. disqus 추가하기 disqus 가입하기 I want to comment on site 클릭 edit profile -&gt; Acount에서 username 설정하기 https://disqus.com/profile/signup/intent/ I want to install Disqus on my site 클릭 &amp; 설정 hexo 폴더의 _config.yml 편집 1disqus_shortname: username disqus site를 만들 때 한국어 설정이 안보이는경우가 있습니다. 이때는 개발자 도구를 열어 수정하면 사용가능합니다. 맨 마지막 줄 추가! 3. Hexo Blog에 image 추가 hexo는 source 폴더의 자원을 가지고 generate를 할 때 public 폴더를 생성합니다. 전역자원 폴더(/source) /source/images라는 폴더를 사용하면 어느 포스트던 폴더 내 자원사용이 가능합니다. 포스트 자원 폴더 전역 폴더에서 모든 파일을 관리하는 것이 아니라 포스트마다 폴더를 만들어 관리할 수 있습니다. 12# Writingpost_asset_folder: true hexo 블로그 폴더의 _config.yml에서 위와 같이 변경하면 1hexo new 를 할때마다 폴더가 함께 생성됩니다. 1![](./folder/img.png) 전역자원 폴더에 비해 상대경로로 빠르게 접근 가능하다는 장점이 있습니다. 3.1 Asset을 이용하여 image 추가 1hexo new post &quot;blahblah&quot; 다음 명령 실행시 같은 경로에 blahblah 폴더가 같이 생성됨Example1&#123;% asset_img cap1.PNG [cap2] %&#125; Result 12[📃 PDF FILE ](../pdf/Git.pdf)&#123;% asset_link Git.pdf 📃 PDF FILE %&#125; 어떻게 다를까?위에 사용한건 상대경로이기 때문에 Home 화면을 제외한 곳에서 포스트를 보게 되면 찾을 수가 다.","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://dasom-captcha.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://dasom-captcha.github.io/tags/Hexo/"}]},{"title":"01_Hexo","slug":"01-Hexo","date":"2019-04-04T05:03:09.000Z","updated":"2019-04-04T05:07:52.936Z","comments":true,"path":"2019/04/04/01-Hexo/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/01-Hexo/","excerpt":"","text":"HEXO 블로그 만들기1. Node.js와 NPM 설치 Node.js 서버 사이드를 JavaScript로 구현할 수 있게 만든 런타임 NPM Node.js기반의 모듈을 모아둔 집합 https://nodejs.org/ko/ 2. Hexo 설치1$ npm install -g hexo-cli 3. 블로그 생성생성할 폴더에 접근 후 123$ hexo init myBlog$ cd myBlog$ npm install node_modules : 기본적인 node.js 모듈 scaffolds : 페이지를 구성할 기본 markdown 파일 source : 작성한 파일등 리소스 theme : 테마 .gitignore : github에 업로드 할때 제외할 파일 목록 정의 _config.yml : 블로그의 옵션 설정 4. github에 연동하기자동으로 github에 업로드 github repo를 만들때 주소를 JHyunB.github.io 로 함 _config.yml 파일 열고 아래처럼 수정 업로드하기 위한 모듈 설치 1$ npm install hexo-deployer-git --save hexo deploy 명령어 수행시 위에서 작성한 주소로 업로드 5. 포스트 생성1$ hexo new post first-post source/_posts 경로에 myfirstpost.md 생성 6. 빌드1$ hexo generate 또는 hexo g hexo g 가능 public 폴더가 생성됨 2019 : 포스트는 날짜별로 생성 css : 테마에 맞게 생성 index.html : myfirstpost가 변경됨 7. 로컬 테스트1$ hexo server 내장 서버를 구동 후 http://localhost:4000로 접속 8. github에 업로드1$ hexo deploy 또는 hexo d hexo d 가능 9. 블로그 방문 내장서버를 종료해도 https://jhyunb.github.io/로 접속가능 10. 테마적용 https://hexo.io/themes/ 에서 원하는 테마 찾기 github에서 다운받아 theme폴더에 저장 hexo _config.yml 파일 theme: 변경 테마마다 추가 설정이 다를 수 있으므로 해당 테마 github 확인 11. Organization을 통한 여러 사용자의 포스팅 여러 사용자가 같은 프로젝트를 관리하기 위한 그룹 계정인 Organization을 생성 한다. 올려진 서버를 clone해서 받은 뒤 (이후 pull을 통해서 항상 최신 버전으로 업데이트 한다.) 위와 같은 명령어를 쳐서 필요한 것들을 받고 포스팅 후 배포하면 된다. (로컬 서버를 통해서 제대로 됐는지 확인하고 commit - push를 해주자.)","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://dasom-captcha.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://dasom-captcha.github.io/tags/Hexo/"}]},{"title":"02_Park_Git","slug":"02-Park-Git","date":"2019-04-04T04:52:54.000Z","updated":"2019-04-04T05:52:38.723Z","comments":true,"path":"2019/04/04/02-Park-Git/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/02-Park-Git/","excerpt":"","text":"💡 IntroGit Branch 관련된 자료 💡 Index👉 Git 👉 Branch CMD 👉 Branch Practice 💡 Git Base👉 PDF Attached📃 PDF FILE 📃 PDF FILE 💡 Branch CMD👉 Why Using the Branch system ?“A successful Git branching model” 컬럼 원문 : http://nvie.com/posts/a-successful-git-branching-model/ 👉 CRUD123456789101112131415161718192021### Create and Switch $ git branch iss53 # 브런치 만들고 $ git checkout iss53 # 전환# 두개를 하나로 줄이면$ git checkout -b iss53### Push$ git checkout iss53$ git add -u $ git commit -m \"YOUR MESSAGE\"$ git push origin iss53### Merge$ git checkout master$ git merge iss53### Branch List$ git Branch### Delete$ git branch -d iss53 💡 Branch Practice👉 To-Do Master 에서 아무 Py 파일 하나 만들어서 tracking 후 dev 브런치를 판다. 이동해서 1번에서 만든 파일을 수정 master Branch에 merge 💡 Ref Link 누구나 쉽게 이해할수있는 Git 입문 Git-scm","categories":[{"name":"Git","slug":"Git","permalink":"http://dasom-captcha.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://dasom-captcha.github.io/tags/Git/"}]},{"title":"01_Kim_Git","slug":"01-Kim-Git","date":"2019-04-04T04:52:42.000Z","updated":"2019-04-04T05:06:37.149Z","comments":true,"path":"2019/04/04/01-Kim-Git/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/01-Kim-Git/","excerpt":"","text":"git_test how to git pull request ? 1. Fork 타겟 프로젝트의 저장소를 자신의 저장소로 Fork 2. clone, remote 설정 Fork한 저장소를 로컬에 clone한다. 1$ git clone &apos;https://github.com/youhyeoneee/git_test.git&apos; 로컬 저장소에 원격 저장소를 추가한다. 원본 프로젝트 저장소 (직접 추가 필요) fork한 로컬 프로젝트 (clone을 하면 기본적으로 origin이라는 별명으로 추가되어있다.) 12345678910#원본 프로젝트 저장소를 원격 저장소로 추가$ git remote add hyeong(별명) https://github.com/DevHyung/git_test#원격 저장소 설정 현황 확인 $ git remote -vhyeong https://github.com/DevHyung/git_test (fetch)hyeong https://github.com/DevHyung/git_test (push)origin https://github.com/youhyeoneee/git_test.git (fetch)origin https://github.com/youhyeoneee/git_test.git (push) 3. branch 생성 자신의 로컬 컴퓨터에서 코드를 추가하는 작업은 branch를 만들어서 진행한다. 12345678# youhyeon 이라는 이름의 branch를 생성한다.$ git checkout -b youhyeonSwitched to a new branch &apos;youhyeon&apos;# 이제 2개의 브랜치가 존재한다. $ git branch master* youhyeon 4. 수정 작업 후 add, commit, push 수정 사항을 add, commit, push를 통해서 자신의 guthub repository(origin)에 반영한다. 주의사항 puch 진행시에 branch 이름을 명시해주어야 한다. 1234567891011121314151617181920# youhyeon 브랜치의 수정 내역을 origin으로 푸시한다.$ git push origin youhyeon``` ## 5. Pull Request 생성+ push 완료 후 본인 계정의 github 저장소에 들어오면 **Compare &amp; pull request** 버튼이 활성화 되어있다.&#123;% asset_img 3.png [3]%&#125;+ 해당 버튼을 선택하여 메시지를 작성하고 PR을 생성한다. ## 6. 코드리뷰, Merge Pull Request+ PR을 받은 원본 저장소 관리자는 코드 변경 내역을 확인하고 Merge 여부를 결정한다.## 7. Merge 이후 동기화 및 branch 삭제+ 원본 저장소에 Merge가 완료되면 로컬 코드와 원본 저장소의 코드를 동기화한다. + 작업하던 로컬의 branch를 삭제한다. #코드 동기화$ git pull hyeong #브랜치 삭제$ git branch -d youhyeon` 나중에 추가로 작업할 일이 있다면 git pull hyeong(remote 별명) 명령을 통해원본 저장소와 동기화를 진행하고 3~7을 반복한다. 출처 : https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/","categories":[{"name":"Git","slug":"Git","permalink":"http://dasom-captcha.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://dasom-captcha.github.io/tags/Git/"}]},{"title":"02_Numpy","slug":"02-Numpy","date":"2019-04-04T04:36:05.000Z","updated":"2019-04-04T04:46:06.615Z","comments":true,"path":"2019/04/04/02-Numpy/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/02-Numpy/","excerpt":"","text":"1. numpy numpy는 과학계산을 위한 라이브러리 다차원 배열을 처리하는데 유용한 기능을 제공 리스트나 튜플보다 훨씬 더 빨리 배열을 처리 2. 배열만들기(1):array() 리스트와 튜플로부터 배열 생성가능 1234a = np.array([[1, 3, 5, 7], [2, 4, 6, 8]])print(a.ndim) #디멘션 반환 2print(a.size) #배열에 있는 총 개수 반환 8print(a.shape) #각 차원의 크기 반환 (2,4) 3. 배열만들기(2):arange()1234b = np.arange(10) #[0 1 2 3 4 5 6 7 8 9]b= np.arange(7, 10) #[7 8 9]b = np.arange(0, 10, 2) #[0 2 4 6 8]b = np.arange(2.0, 3.0, 0.3) #[2. 2.3 2.6 2.9] 4. 배열만들기(3):zeros(), ones(), random() zeros() : 모든 값이 0인 배열 반환 1c = np.zeros((2, 4)) [[0. 0. 0. 0.] [0. 0. 0. 0.]] ones() : 모든 값이 1인 배열 반환 1c = np.ones((3, 3)) [[1. 1. 1.] [1. 1. 1.] [1. 1. 1.]] random() : 0.0과 0.1 사이의 임의 값을 채운 배열 반환 1c = np.random.random((2, 4)) [[0.89451067 0.46158826 0.32610563 0.20057699] [0.58088544 0.93966855 0.23445485 0.72952238]] 5. 배열 모양 바꾸기 : reshape() 배열의 랭크 크기의 곱이 총 배열 수와 같아야 함 12d = np.arange(0,10)d = d.reshape(2,5) [[0 1 2 3 4] [5 6 7 8 9]] 6. 항목 얻기 : [] 1차원 배열은 리스트처럼 작동 12e = np.arange(0,10)print(e[-1], e[7]) #9 7 2차원은 리스트와 다르다 1234e.shape= (2,5)print(e[1,1])e = [[0,1,2],[3,4,5]]print(e[1,1]) #에러 발생 7. 배열 연산 더하기, 빼기, 곱하기 동시연산 가능 123from numpy import *a = arange(0,3) #[0 1 2]a *= 3 #[0 3 6] @ : 행렬곱 12a = np.array([[1,2],[3,4]])b = a@a 8. 실습 랜덤 분포 생성 파일 입출력 12345678910111213mean = 0 #평균std = 5 #표준편차arr1 = np.random.normal(mean, std, [5, 5]) #정규분포arr2 = np.random.exponential(2, [5, 5]) #지수분포arr3 = arr1 * arr2print(arr3)np.save(\"./data\", arr3) #data.npy로 저장arr = np.load(\"./data.npy\") #불러오기devArr = np.vsplit(arr, 5) #가로로 자르기print(devArr[0][0])plt.plot(devArr[0][0]) #그래프그리기plt.show()","categories":[{"name":"Python","slug":"Python","permalink":"http://dasom-captcha.github.io/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://dasom-captcha.github.io/tags/Python/"}]},{"title":"01_Pandas","slug":"01-Pandas","date":"2019-04-04T04:35:51.000Z","updated":"2019-04-04T04:45:35.237Z","comments":true,"path":"2019/04/04/01-Pandas/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/01-Pandas/","excerpt":"","text":"1. PandasPython Data Analysis Library 파이썬에서 사용하는 데이터분석 라이브러리 행과 열로 이루어진 데이터 객체를 만들어 다룰 수 있게 함. 보다 안정적으로 대용량의 데이터들을 처리하는데 매우 편리한 도구 2. Pandas 자료 구조 1차원 자료구조 : Series 2차원 자료구조 : DataFrame 3차원 자료구조 : Panel (1) Series Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). 가장 간단한 1차원 자료구조 Series는 배열/리스트와 같은 일련의 시퀀스 데이타를 받아들인다. 별도의 인덱스 레이블을 지정하지 않으면 자동적으로 0부터 시작되는 디폴트 정수인덱스를 사용한다. 선언 &gt;&gt;&gt; s = pd.Series(data, index=index) 123import pandas as pdobj = pd.Series([4, 7, -5, 3]) (2) DataFrame DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dict of Series objects. It is generally the most commonly used pandas object. 2차원 자료구조 DataFrame는 행과 열이 있는 테이블 데이타(Tabular Data)를 받아들인다. 이는 python의 dictionary 또는 numpy의 array로 정의할 수 있다. 123data = &#123;&apos;name&apos; : [&apos;Beomwoo&apos;, &apos;Beomwoo&apos;, &apos;Beomwoo&apos;, &apos;Kim&apos;, &apos;Park&apos;], &apos;year&apos;:[2016, 2014, 2015, 2016, 2017]&#125;, &apos;points&apos; : [1.5, 1.7, 3.6, 2.4, 2.9]&#125;df = pd.DataFrame(data) name year points Beomwoo 2016 1.5 Beomwoo 2014 1.7 Beomwoo 2015 3.6 Kim 2016 2.4 Park 2017 2.9 (3) Panel Panel is a somewhat less-used, but still important container for 3-dimensional data. The term panel data is derived from econometrics and is partially responsible for the name pandas: pan(el)-da(ta)-s. The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data and, in particular, econometric analysis of panel data. 3차원 자료구조 Panel은 Axis 0 (items), Axis 1 (major_axis), Axis 2 (minor_axis) 등 3개의 축을 가지고 있다 Axis 0은 그 한 요소가 2차원의 DataFrame 에 해당되며, Axis 1은 DataFrame의 행(row)에 해당되고, Axis 2는 DataFrame의 열(column)에 해당된다. +아래 예제는 numpy를 사용하여 3차원 난수를 발생시킨 후, 이를 pandas.Panel()에 적용한 예이다.12data = np.random.rand(2,3,4)p = pd.Panel(data) 2(items) 3(major axis) 4(miner axis) 크기의 Panel 객체가 생성되었음을 알 수 있다.Panel 객체 p로부터 p[0]을 조회하면, Axis 0의 첫번째 요소인 DataFrame이 출력됨을 볼 수 있다. 3. 데이터 액세스 Indexing, arrtibute 사용 12df[&apos;year&apos;] #year column 출력 df.year #위에와 같은 의미 Boolean indexing : 특정 조건의 데이터만 필터링 1df[df[&apos;year&apos;]&gt;2016] #df자료에서 year이 2016보다 큰 행만 출력 데이터 양이 많은 경우 12df.head() #기본적으로 앞 5개, 데이터의 개수를 인자로 넣으면 그 만큼의 데이터를 보여준다.df.tail() #기본적으로 뒤 5개, 위와 같다. 다양한 연산 함수 : sum(), mean(), max(), min(), describe() … 1주차 피드백 : 첫번째 행에서 첫번째 열 뽑기 12print(df.loc[df.index[0], df.columns[0]]) #.loc는 [인덱스(행)명, 칼럼(열)명]으로 접근 가능하다print(df.iloc[0,0]) #.iloc는 index숫자로써 가져온다. 4. 외부 데이터 읽고 쓰기 pandas는 CSV 파일, 텍스트 파일, 엑셀 파일, SQL 데이타베이스, HDF5 포맷 등 다양한 외부 리소스에 데이타를 읽고 쓸 수 있는 기능을 제공 12df = pd.read_excel(&apos;foo.xlsx&apos;, &apos;Sheet1&apos;, index_col=None, na_values=[&apos;NA&apos;]) #읽기df = pd.to_excel(&apos;foo.xlsx&apos;, sheet_name=&apos;Sheet1&apos;) #쓰기 참고 출처 예제로 배우는 Python 프로그래밍 : Pandas데이터 분석 Pandas 기초 정리 pandas 데이터 구조 소개","categories":[{"name":"Python","slug":"Python","permalink":"http://dasom-captcha.github.io/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://dasom-captcha.github.io/tags/Python/"}]},{"title":"Captcha Solver Study","slug":"captcha-solver-study","date":"2019-04-04T02:04:01.774Z","updated":"2019-04-04T04:29:58.014Z","comments":true,"path":"2019/04/04/captcha-solver-study/","link":"","permalink":"http://dasom-captcha.github.io/2019/04/04/captcha-solver-study/","excerpt":"","text":"2019-captcha-solver-studybased on ML, target is the captcha version 1.0 that is OCR character input for protect the robots.we making the captch-solver by study that start at 2019-03-11 Members, i wrote the above 💡 Syllabus👉 Background [X] pandas, numpy mini project (03/22) Pandas : YHKim Numpy : JHBaek, DWShin [X] HEXO blog for presentation the study content (03/29) HEXO : JHBaek, DWShin [X] git branch, pull requests, issue template (03/29) GIT : HJPark, YHKim advanced Git ( –no-ff option, branch, fast forward, etc..) (Expected) JHBaek, DWShin, HJPark, YHKim MNIST, OCR basic example code Basing tensorflow code + Mathmatical knowledge Scrapping for Data collection Basic web page for Data labeling (if need to JS, include ts,node JS) 👉 Project OCR or anti-captcha PAPER seminar Using by OCR or tesseract ? evaluate score Using by MNIST evaluate score Search the another ways for solving a captcha 👉 Util Using by Docker PM Tool (not yet determined) 💡 Refer👉 📃 awesome-deep-text-detection-recognition 💡 Rule Weekly meetings are Thursday Commit message example : (verb) (what do you do ) at (file or folder )","categories":[],"tags":[]}]}